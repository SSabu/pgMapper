doctype html
html
  head
    link(rel='stylesheet', href='https://openlayers.org/en/v4.6.5/css/ol.css')
    link(rel='stylesheet', href='/stylesheets/style.css')
    script(src='https://openlayers.org/en/v4.6.5/build/ol.js')
    script(src='https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js')
    body

block content
  h1= title
  #map

  script(type='text/javascript').

         let resultString = !{JSON.stringify(result)};

         let features = [];

         resultString.rows.forEach( function(row) {
          features.push({"type":"Feature", "geometry": JSON.parse(row.st_asgeojson)});
         });

         var geojsonObject = { "type" : "FeatureCollection", "crs" :  { "type" : "name" , "properties" : { "name" : "EPSG:4326" } }, "features" :  features };

         var format = new ol.format.GeoJSON({
          featureProjection :"EPSG:3857"
         });

         var vectorSource = new ol.source.Vector({
          features: format.readFeatures(geojsonObject)
         });

         var styles = {
          "MultiPolygon": new ol.style.Style({
           stroke: new ol.style.Stroke({
            color: "black",
            width: 2
           }),
           fill: new ol.style.Fill({
            color: "rgba(0,0,0,0)"
           })
          })
         };

         var iconStyle = new ol.style.Style({
          image: new ol.style.Icon({
           anchor: [0.5,0.5],
           anchorXUnits: 'fraction',
           anchorYUnits: 'pixels',
           opacity: 0.75,
           src: 'https://upload.wikimedia.org/wikipedia/commons/thumb/9/93/Map_marker_font_awesome.svg/50px-Map_marker_font_awesome.svg.png'
          })
         });

         var styleFunction = function(feature) {
          return styles[feature.getGeometry().getType()];
         };

         var vectorLayer = new ol.layer.Vector({
          source: vectorSource,
          style: styleFunction
         });

         var osm = new ol.layer.Tile({source: new ol.source.OSM()})

         var map = new ol.Map({
             layers: [osm, vectorLayer],
             target: 'map',
             view: new ol.View({
                 center: ol.proj.fromLonLat([-122.4497, 37.7590]),
                 zoom: 13
             })
         });

         map.on('click', function(evt) {

          var lonlat = ol.proj.transform(evt.coordinate, 'EPSG:3857','EPSG:4326');

          $.ajax({
           url: '/map',
           type: 'POST',
           data: {lonlat},
           'content-type': 'application/text; charset=utf-8',
           success: function(data) {

             let nearestFeatures = [];

             data.rows.forEach( function(row) {
              nearestFeatures.push({"type":"Feature", "geometry": JSON.parse(row.st_asgeojson)});
             });

             var nearGeojsonObject = { "type" : "FeatureCollection", "crs" :  { "type" : "name" , "properties" : { "name" : "EPSG:4326" } }, "features" :  nearestFeatures };

             var icon = new ol.Feature(
              new ol.geom.Point(evt.coordinate)
             );

             icon.setStyle(iconStyle);

             var newVectorSource = new ol.source.Vector({
              features: format.readFeatures(nearGeojsonObject)
             });

             newVectorSource.addFeature(icon);

             var newVectorLayer = new ol.layer.Vector({
              source: newVectorSource,
              style: styleFunction
             });

             vectorLayer.getSource().clear();

             map.addLayer(newVectorLayer);
             map.getView().setCenter(ol.proj.fromLonLat(lonlat));
             map.getView().setZoom(15);

           }

          })

         });
